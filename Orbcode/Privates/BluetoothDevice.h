#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvisibility"

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wvisibility"

//
//  BluetoothDevice.h
//

//#ifndef BluetoothDevice_h
//#define BluetoothDevice_h

/* Generated by RuntimeBrowser
 Image: /System/Library/PrivateFrameworks/BluetoothManager.framework/BluetoothManager
 */

//#import "CDStructures.h"

@interface BluetoothDevice : NSObject {
	NSString *_address;
	struct BTDeviceImpl { } *_device;
	NSString *_name;
}

- (void)_clearName;
- (BOOL)_isNameCached;
- (void)acceptSSP:(int)arg1;
- (id)address;
- (int)batteryLevel;
- (BOOL)cloudPaired;
- (int)compare:(id)arg1;
- (void)connect;
- (void)connectWithServices:(unsigned int)arg1;
- (BOOL)connected;
- (unsigned int)connectedServices;
- (unsigned int)connectedServicesCount;
//- (id)copyWithZone:(struct _NSZone { }*)arg1;
//- (void)dealloc;
- (id)description;
//- (struct BTDeviceImpl { }*)device;
- (struct BTDeviceImpl *)device;
- (void)disconnect;
- (void)endVoiceCommand;
- (id)getServiceSetting:(unsigned int)arg1 key:(id)arg2;
- (id)initWithDevice:(struct BTDeviceImpl { }*)arg1 address:(id)arg2;
- (BOOL)isAccessory;
- (BOOL)isServiceSupported:(unsigned int)arg1;
- (unsigned int)majorClass;
- (unsigned int)minorClass;
- (id)name;
- (BOOL)paired;
- (unsigned int)productId;
- (id)scoUID;
- (void)setDevice:(struct BTDeviceImpl { }*)arg1;
- (void)setPIN:(id)arg1;
- (void)setServiceSetting:(unsigned int)arg1 key:(id)arg2 value:(id)arg3;
- (void)setSyncGroup:(int)arg1 enabled:(BOOL)arg2;
- (void)setSyncSettings:(struct { BOOL x1; BOOL x2; BOOL x3; BOOL x4; })arg1;
- (void)startVoiceCommand;
- (BOOL)supportsBatteryLevel;
- (id)syncGroups;
- (struct { BOOL x1; BOOL x2; BOOL x3; BOOL x4; })syncSettings;
- (int)type;
- (void)unpair;
- (unsigned int)vendorId;

@end

//#endif /* BluetoothDevice_h */


///*
// *     Generated by class-dump 3.1.1.
// *
// *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2006 by Steve Nygard.
// */
//
//
//@interface BluetoothDevice : NSObject
//{
//	struct BTDeviceImpl *_device;
//	int _batteryLevel;
//	BOOL _supportsBatteryLevel;
//}
//
//- (void)_setBatteryLevel:(int)fp8;	// IMP=0x3227030c
//- (id)address;	// IMP=0x32270000
//- (BOOL)available;	// IMP=0x32270324
//- (int)batteryLevel;	// IMP=0x322702f8
//- (int)compare:(id)fp8;	// IMP=0x322702a0
//- (void)connect;	// IMP=0x3227018c
//- (BOOL)connected;	// IMP=0x3227013c
//- (struct BTDeviceImpl *)device;	// IMP=0x3226ff4c
//- (void)disconnect;	// IMP=0x32270254
//- (id)initWithDevice:(struct BTDeviceImpl *)fp8;	// IMP=0x3226fee8
//- (id)name;	// IMP=0x3226ff64
//- (BOOL)paired;	// IMP=0x322700ec
//- (void)setDevice:(struct BTDeviceImpl *)fp8;	// IMP=0x3226ff54
//- (void)setPIN:(id)fp8;	// IMP=0x322701cc
//- (BOOL)supported;	// IMP=0x32270080
//- (BOOL)supportsBatteryLevel;	// IMP=0x3227031c
//- (int)type;	// IMP=0x32270050
//- (void)unpair;	// IMP=0x32270214
//
//@end

#pragma GCC diagnostic pop
#pragma clang diagnostic pop
